install.packages('caret')
pak::pak('topepo/caret/pkg/caret')
install.packages(pak)
install.packages("pak)
install.packages("pak")
install.packages("pak")
pak::pak('topepo/caret/pkg/caret')
pkgbuild::check_build_tools(debug = TRUE)
install.packages("pkgbuild")
pak::pak('topepo/caret/pkg/caret')
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
pak::pak('topepo/caret/pkg/caret')
.Last.error
q()
# Set the working directory for all chunks
knitr::opts_chunk$set(root.dir = "C:/Users/andyg/Documents/MasterIA/2.CienciadeDatos/R_eval")
tictac <- data.frame(read.csv("tic-tac-toe.txt"))
header <- c("pos1","pos2","pos3","pos4","pos5","pos6","pos7","pos8","pos9","win")
colnames(tictac) <- header
head(tictac)
any(is.na(tictac))
tictac[!complete.cases(tictac),]
val_pos <- c("x", "o", "b")
win_pos <- c("positive", "negative")
any(!as.matrix(tictac[, 1:9]) %in% val_pos)
any(!tictac[, 10] %in% win_pos)
?complete.cases
any(is.na(tictac))
tictac[!complete.cases(tictac),]
values <- c("x", "o", "b","positive", "negative")
any(!as.matrix(tictac[, 1:9]) %in% values[1:3])
any(!tictac[, 10] %in% values[4:5])
any(is.na(tictac))
values <- c("x", "o", "b","positive", "negative")
any(!as.matrix(tictac[, 1:9]) %in% values[1:3])
any(!tictac[, 10] %in% values[4:5])
any(is.na(tictac))
values <- c("x", "o", "b","positive", "negative")
any(!as.matrix(tictac[, 1:9]) %in% values[1:3])
any(!tictac[, 10] %in% values[4:5])
# Global chunk options for all code cells
knitr::opts_chunk$set(
root.dir = "C:/Users/andyg/Documents/MasterIA/2.CienciadeDatos/R_eval",    # Set the working directory for all chunks
results = 'hold',    # Combine all outputs together in one block
fig.show = 'hold',   # Show all plots together
echo = TRUE          # Show the code along with the output (default)
)
tictac <- data.frame(read.csv("tic-tac-toe.txt"))
header <- c("pos1","pos2","pos3","pos4","pos5","pos6","pos7","pos8","pos9","win")
colnames(tictac) <- header
head(tictac)
any(is.na(tictac))
values <- c("x", "o", "b","positive", "negative")
any(!as.matrix(tictac[, 1:9]) %in% values[1:3])
any(!tictac[, 10] %in% values[4:5])
# Global chunk options for all code cells
knitr::opts_chunk$set(
root.dir = "C:/Users/andyg/Documents/MasterIA/2.CienciadeDatos/R_eval",    # Set the working directory for all chunks
results = 'hold',    # Combine all outputs together in one block
fig.show = 'hold',   # Show all plots together
echo = TRUE          # Show the code along with the output (default)
)
cat("
<style>
pre, .r-output, .inline-output {
margin-bottom: 30px;
}
</style>
")
tictac <- data.frame(read.csv("tic-tac-toe.txt"))
header <- c("pos1","pos2","pos3","pos4","pos5","pos6","pos7","pos8","pos9","win")
colnames(tictac) <- header
head(tictac)
# Global chunk options for all code cells
knitr::opts_chunk$set(
root.dir = "C:/Users/andyg/Documents/MasterIA/2.CienciadeDatos/R_eval",    # Set the working directory for all chunks
results = 'hold',    # Combine all outputs together in one block
fig.show = 'hold',   # Show all plots together
echo = TRUE          # Show the code along with the output (default)
)
cat("
<style>
pre, .r-output, .inline-output {
margin-bottom: 30px;
}
</style>
")
tictac <- data.frame(read.csv("tic-tac-toe.txt"))
header <- c("pos1","pos2","pos3","pos4","pos5","pos6","pos7","pos8","pos9","win")
colnames(tictac) <- header
head(tictac)
any(is.na(tictac))
values <- c("x", "o", "b","positive", "negative")
any(!as.matrix(tictac[, 1:9]) %in% values[1:3])
any(!tictac[, 10] %in% values[4:5])
# Global chunk options for all code cells
knitr::opts_chunk$set(
root.dir = "C:/Users/andyg/Documents/MasterIA/2.CienciadeDatos/R_eval",    # Set the working directory for all chunks
results = 'hold',    # Combine all outputs together in one block
fig.show = 'hold',   # Show all plots together
echo = TRUE          # Show the code along with the output (default)
)
cat("
<style>
pre, .r-output, .inline-output {
margin-bottom: 30px;
}
</style>
")
tictac <- data.frame(read.csv("tic-tac-toe.txt"))
header <- c("pos1","pos2","pos3","pos4","pos5","pos6","pos7","pos8","pos9","win")
colnames(tictac) <- header
head(tictac)
any(is.na(tictac))
values <- c("x", "o", "b","positive", "negative")
any(!as.matrix(tictac[, 1:9]) %in% values[1:3])
any(!tictac[, 10] %in% values[4:5])
length(tictac_train)
library(caret)
set.seed(1000)
train_pos <- createDataPartition(tictac, p = .7,
list = FALSE,
times = 1)
tictac_train <- iris[ train_pos,]
tictac_test  <- iris[-train_pos,]
head(train_pos)
length(tictac_train)
length(tictac_test)
library(caret)
set.seed(1000)
train_pos <- createDataPartition(tictac$win, p = .7,
list = FALSE,
times = 1)
tictac_train <- iris[ train_pos,]
tictac_test  <- iris[-train_pos,]
head(train_pos)
length(tictac_test)
length(tictac_train)
library(caret)
set.seed(1000)
train_pos <- createDataPartition(tictac$win, p = .7,
list = FALSE,
times = 1)
tictac_train <- tictac[ train_pos,]
tictac_test  <- tictac[-train_pos,]
head(train_pos)
length(tictac_train)
length(tictac_test)
tictac_test
tictac_train
shape(tictac_train)
dim(tictac_train)
dim(tictac_train)[1]
dim(tictac_train)[1]/dim(tictac_train)[2]
dim(tictac_train)[1]/dim(tictac_test)[1]
dim(tictac_train)[1]/dim(tictac_test)[1] - 7/3
Aquí podemos com
Aquí podemos com
dim(tictac[10,]=="positive")
dim(tictac[,10]=="positive")
dim(tictac[tictac[10,]=="positive"])
tictac[10,]=="positive"
tictac[,10]=="positive"
tictac[tictac[,10]=="positive"]
tictac(tictac[,10]=="positive")
sum(tictac[,10]=="positive")
sum(tictac[,10]=="positive")/sum(tictac[,10]=="negative")
sum(tictac[,10]=="positive")/sum(tictac[,10]=="negative")
sum(tictac_train[,10]=="positive")/sum(tictac_train[,10]=="negative")
sum(tictac[,10]=="positive")/sum(tictac[,10]=="negative")
sum(tictac_train[,10]=="positive")/sum(tictac_train[,10]=="negative")
sum(tictac_test[,10]=="positive")/sum(tictac_test[,10]=="negative")
dim(tictac_train)[1]/dim(tictac_test)[1] - 7/3
sum(tictac[,10]=="positive")/sum(tictac[,10]=="negative")
sum(tictac_train[,10]=="positive")/sum(tictac_train[,10]=="negative")
sum(tictac_test[,10]=="positive")/sum(tictac_test[,10]=="negative")
library(klaR)
install.packages(klaR)
# Global chunk options for all code cells
knitr::opts_chunk$set(
root.dir = "C:/Users/andyg/Documents/MasterIA/2.CienciadeDatos/R_eval",    # Set the working directory for all chunks
results = 'hold',    # Combine all outputs together in one block
fig.show = 'hold',   # Show all plots together
echo = TRUE          # Show the code along with the output (default)
)
cat("
<style>
pre, .r-output, .inline-output {
margin-bottom: 30px;
}
</style>
")
tictac <- data.frame(read.csv("tic-tac-toe.txt"))
header <- c("pos1","pos2","pos3","pos4","pos5","pos6","pos7","pos8","pos9","win")
colnames(tictac) <- header
head(tictac)
any(is.na(tictac))
values <- c("x", "o", "b","positive", "negative")
any(!as.matrix(tictac[, 1:9]) %in% values[1:3])
any(!tictac[, 10] %in% values[4:5])
library(caret)
set.seed(100)
train_pos <- createDataPartition(tictac$win, p = .7,
list = FALSE,
times = 1)
tictac_train <- tictac[ train_pos,]
tictac_test  <- tictac[-train_pos,]
dim(tictac_train)[1]/dim(tictac_test)[1] - 7/3
sum(tictac[,10]=="positive")/sum(tictac[,10]=="negative")
sum(tictac_train[,10]=="positive")/sum(tictac_train[,10]=="negative")
sum(tictac_test[,10]=="positive")/sum(tictac_test[,10]=="negative")
library(caret)
library(klaR)
library(dplyr)
library(knitr)
library(kableExtra)
library(AUC)
set.seed(1000)
models <- list(
nb_train <- train(win ~ ., data = tictac_train, method = "nb"),        #Naive Bayes - nb
dt_train <- train(win ~ ., data = tictac_train, method = "J48"),     #Decision Tree - dt
nn_train <- train(win ~ ., data = tictac_train, method = "nnet"),   #Neural Network - nn
knn_train <- train(win ~ ., data = tictac_train, method = "knn"), #Nearest Neighbour - knn
SVM_train <- train(win ~ ., data = tictac_train, method = "svmLinear")         #SVM (linear kernel) - svm
)
results <- bind_rows(lapply(models, function(model) {
data.frame(
Accuracy = max(model$results$Accuracy),  # Mejor accuracy
Kappa = max(model$results$Kappa)         # Mejor kappa
)
}))
Models <- c('Naive Bayes','Decision Tree','Neural Network','Nearest Neighbour','SVM')
results <- cbind(Models, results)
# Mostrar tabla con estilo en HTML
kable(results, format = "html") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
nn_pred <- predict(nn_train,tictac_test)
nn_matrix <- confusionMatrix(nn_pred,factor(tictac_test$win))
nn_eval <- postResample(pred = nn_pred, obs = factor(tictac_test$win))
nn_eval[[1]]
eval <- list(
nb_eval <- postResample(pred = predict(nb_train,tictac_test), obs = factor(tictac_test$win)),        #Naive Bayes - nb
dt_eval <- postResample(pred = predict(dt_train,tictac_test), obs = factor(tictac_test$win)),     #Decision Tree - dt
nn_eval <- postResample(pred = predict(nn_train,tictac_test), obs = factor(tictac_test$win)),     #Neural Network - nn
knn_eval <- postResample(pred = predict(knn_train,tictac_test), obs = factor(tictac_test$win)), #Nearest Neighbour - knn
SVM_eval <- postResample(pred = predict(SVM_train,tictac_test), obs = factor(tictac_test$win))               #SVM (linear kernel) - svm
)
eval_results <- bind_rows(lapply(eval, function(model) {
data.frame(
Accuracy = model[[1]],  # Mejor accuracy
Kappa = model[[2]]      # Mejor kappa
)
}))
eval_results <- cbind(Models, eval_results)
# Mostrar tabla con estilo en HTML
kable(eval_results, format = "html") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
positives <- ifelse(tictac_test$win == "positive", 1, 0)
SVM_pred <- predict(SVM_train, tictac_test, type = "prob")[, "positive"]
SVM_pred
table(SVM_pred)
summary(SVM_pred)
#roc_curve <- roc(SVM_pred, factor(positives))
# Plot the ROC curve
#plot(roc_curve)
#auc(roc_curve)  # Calculate the AUC value
set.seed(1000)
models <- list(
nb_train <- train(win ~ ., data = tictac_train, method = "nb"),         #Naive Bayes - nb
dt_train <- train(win ~ ., data = tictac_train, method = "J48"),        #Decision Tree - dt
nn_train <- train(win ~ ., data = tictac_train, method = "nnet"),       #Neural Network - nn
knn_train <- train(win ~ ., data = tictac_train, method = "knn"),       #Nearest Neighbour - knn
SVM_train <- train(win ~ ., data = tictac_train, method = "svmLinear2")  #SVM (linear kernel) - svm
)
results <- bind_rows(lapply(models, function(model) {
data.frame(
Accuracy = max(model$results$Accuracy),  # Mejor accuracy
Kappa = max(model$results$Kappa)         # Mejor kappa
)
}))
Models <- c('Naive Bayes','Decision Tree','Neural Network','Nearest Neighbour','SVM')
results <- cbind(Models, results)
nn_pred <- predict(nn_train,tictac_test)
nn_matrix <- confusionMatrix(nn_pred,factor(tictac_test$win))
nn_eval <- postResample(pred = nn_pred, obs = factor(tictac_test$win))
nn_eval[[1]]
eval <- list(
nb_eval <- postResample(pred = predict(nb_train,tictac_test), obs = factor(tictac_test$win)),        #Naive Bayes - nb
dt_eval <- postResample(pred = predict(dt_train,tictac_test), obs = factor(tictac_test$win)),     #Decision Tree - dt
nn_eval <- postResample(pred = predict(nn_train,tictac_test), obs = factor(tictac_test$win)),     #Neural Network - nn
knn_eval <- postResample(pred = predict(knn_train,tictac_test), obs = factor(tictac_test$win)), #Nearest Neighbour - knn
SVM_eval <- postResample(pred = predict(SVM_train,tictac_test), obs = factor(tictac_test$win))               #SVM (linear kernel) - svm
)
eval_results <- bind_rows(lapply(eval, function(model) {
data.frame(
Accuracy = model[[1]],  # Mejor accuracy
Kappa = model[[2]]      # Mejor kappa
)
}))
eval_results <- cbind(Models, eval_results)
# Mostrar tabla con estilo en HTML
kable(eval_results, format = "html") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
positives <- ifelse(tictac_test$win == "positive", 1, 0)
SVM_pred <- predict(SVM_train, tictac_test, type = "prob")[, "positive"]
positives <- ifelse(tictac_test$win == "positive", 1, 0)
SVM_train
SVM_pred <- predict(SVM_train, tictac_test, type = "prob")[, "positive"]
positives <- ifelse(tictac_test$win == "positive", 1, 0)
SVM_train
#SVM_pred <- predict(SVM_train, tictac_test, type = "prob")[, "positive"]
#SVM_pred
#table(SVM_pred)
#summary(SVM_pred)
#roc_curve <- roc(SVM_pred, factor(positives))
# Plot the ROC curve
#plot(roc_curve)
#auc(roc_curve)  # Calculate the AUC value
positives <- ifelse(tictac_test$win == "positive", 1, 0)
SVM_train
SVM_pred <- predict(SVM_train, tictac_test, type = "prob")[, "positive"]
positives <- ifelse(tictac_test$win == "positive", 1, 0)
SVM_train <- train(win ~ ., data = tictac_train, method = "svmLinear2")
SVM_train
#SVM_pred <- predict(SVM_train, tictac_test, type = "prob")[, "positive"]
#SVM_pred
#table(SVM_pred)
#summary(SVM_pred)
#roc_curve <- roc(SVM_pred, factor(positives))
# Plot the ROC curve
#plot(roc_curve)
#auc(roc_curve)  # Calculate the AUC value
positives <- ifelse(tictac_test$win == "positive", 1, 0)
SVM_train <- train(win ~ ., data = tictac_train, method = "svmLinear2")
SVM_train
SVM_pred <- predict(SVM_train, tictac_test, type = "prob")[, "positive"]
positives <- ifelse(tictac_test$win == "positive", 1, 0)
SVM_train <- train(win ~ ., data = tictac_train, method = "svmLinear2")
SVM_pred <- predict(SVM_train, tictac_test, type = "raw")
#SVM_pred
#table(SVM_pred)
#summary(SVM_pred)
#roc_curve <- roc(SVM_pred, factor(positives))
# Plot the ROC curve
#plot(roc_curve)
#auc(roc_curve)  # Calculate the AUC value
positives <- ifelse(tictac_test$win == "positive", 1, 0)
SVM_train <- train(win ~ ., data = tictac_train, method = "svmLinear2")
SVM_pred <- predict(SVM_train, tictac_test, type = "raw")
roc_curve <- roc(SVM_pred, factor(positives))
# Plot the ROC curve
#plot(roc_curve)
#auc(roc_curve)  # Calculate the AUC value
positives <- ifelse(tictac_test$win == "positive", 1, 0)
SVM_train <- train(win ~ ., data = tictac_train, method = "svmLinear2")
SVM_pred <- predict(SVM_train, tictac_test, type = "raw")
roc_curve <- roc(SVM_pred, factor(positives))
# Plot the ROC curve
#plot(roc_curve)
#auc(roc_curve)  # Calculate the AUC value
positives <- ifelse(tictac_test$win == "positive", 1, 0)
SVM_train <- train(win ~ ., data = tictac_train, method = "svmLinear2")
SVM_pred <- predict(SVM_train, tictac_test, type = "raw")
roc_curve <- roc(SVM_pred, factor(positives))
# Plot the ROC curve
plot(roc_curve)
auc(roc_curve)  # Calculate the AUC value
positives <- ifelse(tictac_test$win == "positive", 1, 0)
SVM_train <- train(win ~ .,
data = tictac_train,
method = "svmLinear2",
trControl = fitControl,
metric = "ROC")
library(caret)
library(klaR)
library(dplyr)
library(knitr)
library(kableExtra)
library(AUC)
library(kernlab)
positives <- ifelse(tictac_test$win == "positive", 1, 0)
SVM_train <- train(win ~ .,
data = tictac_train,
method = "svmLinear2",
trControl = fitControl,
metric = "ROC")
positives <- ifelse(tictac_test$win == "positive", 1, 0)
SVM_train <- train(win ~ .,
data = tictac_train,
method = "svmLinear2",
metric = "ROC")
